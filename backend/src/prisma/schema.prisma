// ============================================================================
// CONFIGURACIÓN
// ============================================================================

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
  log             = ["query"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// ENUMS
// ============================================================================

enum ProcurementType {
  NATIONAL
  INTERNATIONAL
}

enum DeliveryType {
  WAREHOUSE
  PROJECT
}

enum ItemType {
  PRODUCT
  SERVICE
  RENTAL
  OTHER
}

enum RequestCategory {
  SUMINISTROS
  LICITACIONES
  INVENTARIOS
  PROYECTOS
}

enum FollowStatus {
  IN_PROGRESS
  PAUSED
  CANCELLED
  COMPLETED
}

// ============================================================================
// MÓDULO: IDENTIDAD Y CONTROL DE ACCESO
// ============================================================================

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  passwordHash String
  fullName     String
  isActive     Boolean  @default(true)
  costCenter   String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relaciones
  roleId       String
  role         Role         @relation(fields: [roleId], references: [id])
  departmentId String?
  department   Department?  @relation(fields: [departmentId], references: [id])

  // Back-relations
  projectMemberships ProjectMember[]
  managedProjects    Project[]           @relation("ProjectManager")
  assignedToMe       Assignment[]        @relation("AssigneeAssignments")
  purchaseRequests   PurchaseRequest[]   @relation("RequesterRequests")
  attachments        Attachment[]        @relation("AttachmentCreatedBy")
  auditLogs          AuditLog[]
  notifications      Notification[]
  threads            Thread[]
  threadParticipants ThreadParticipant[]
  messages           Message[]
  chatMessages       ChatMessage[]       @relation("ChatMessageSender")
  assignments        Assignment[]        @relation("AssignmentRequester")
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  users       User[]
  permissions RolePermission[]
}

model Permission {
  id          String   @id @default(cuid())
  resource    String
  action      String
  description String?
  createdAt   DateTime @default(now())

  roles RolePermission[]

  @@unique([resource, action])
}

model RolePermission {
  roleId       String
  permissionId String

  role       Role       @relation(fields: [roleId], references: [id])
  permission Permission @relation(fields: [permissionId], references: [id])

  @@id([roleId, permissionId])
}

// ============================================================================
// MÓDULO: ORGANIZACIÓN
// ============================================================================

model Department {
  id   String @id @default(cuid())
  name String @unique

  users            User[]
  purchaseRequests PurchaseRequest[]
}

model Client {
  id      String  @id @default(cuid())
  name    String
  taxId   String? @unique
  contact String?
  isActive      Boolean            @default(true)
  departmentId  String?   

  purchaseRequests PurchaseRequest[]
}

// ============================================================================
// MÓDULO: PROYECTOS Y UBICACIONES
// ============================================================================

model Project {
  id          String    @id @default(cuid())
  name        String
  code        String?   @unique
  description String?
  status      String    @default("ACTIVE")
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  managerId String?
  manager   User?   @relation("ProjectManager", fields: [managerId], references: [id])

  locations        Location[]
  members          ProjectMember[]
  purchaseRequests PurchaseRequest[]
  purchaseOrders   PurchaseOrder[]
}

model ProjectMember {
  id   String  @id @default(cuid())
  role String?

  projectId String
  project   Project @relation(fields: [projectId], references: [id])
  userId    String
  user      User    @relation(fields: [userId], references: [id])

  @@unique([projectId, userId])
}

model Location {
  id        String  @id @default(cuid())
  type      String
  name      String  @unique
  address1  String?
  address2  String?
  city      String?
  state     String?
  zip       String?
  country   String?
  latitude  Float?
  longitude Float?
  active    Boolean @default(true)

  projectId String?
  project   Project? @relation(fields: [projectId], references: [id])

  purchaseOrders         PurchaseOrder[]
  destinationRequests    PurchaseRequest[] @relation("PRDestination")
  warehouseRequests      PurchaseRequest[] @relation("PRWarehouse")
}

// ============================================================================
// MÓDULO: PROVEEDORES Y CATÁLOGO
// ============================================================================

model Supplier {
  id           String   @id @default(cuid())
  name         String
  rtn          String?
  email        String?
  phone        String?
  currencyCode String?
  active       Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  products       SupplierProduct[]
  quoteOffers    QuoteOffer[]
  purchaseOrders PurchaseOrder[]
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String?
  unit        String?
  skuInternal String?  @unique
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  attributes    ProductAttribute[]
  suppliers     SupplierProduct[]
  requestItems  PRItem[]
  orderLines    POLine[]
}

model ProductAttribute {
  id    String @id @default(cuid())
  key   String
  value String

  productId String
  product   Product @relation(fields: [productId], references: [id])

  @@index([productId])
}

model SupplierProduct {
  id           String    @id @default(cuid())
  skuSupplier  String?
  price        Decimal   @db.Decimal(18, 6)
  currencyCode String
  validFrom    DateTime  @default(now())
  validTo      DateTime?

  supplierId String
  supplier   Supplier @relation(fields: [supplierId], references: [id])
  productId  String
  product    Product  @relation(fields: [productId], references: [id])

  @@unique([supplierId, productId, validFrom])
}

// ============================================================================
// MÓDULO: MONEDAS Y TIPOS DE CAMBIO
// ============================================================================

model Currency {
  code   String  @id
  name   String
  isBase Boolean @default(false)
}

model ExchangeRate {
  id          String   @id @default(cuid())
  baseCode    String
  quoteCode   String
  rate        Decimal  @db.Decimal(18, 6)
  effectiveOn DateTime

  @@unique([baseCode, quoteCode, effectiveOn])
}

// ============================================================================
// MÓDULO: SOLICITUDES DE COMPRA
// ============================================================================

model PurchaseRequest {
  id              String          @id @default(cuid())
  reference       String?         
  title           String
  description     String?
  finalClient     String?
  requestType     String?
  scope           String?
  deliveryPlace   String?
  comments        String?
  deadline        DateTime?
  status          String          @default("SUBMITTED") //SUBMITTED, IN_PROGRESS, APPROVED, REJECTED, CANCELLED
  requestCategory RequestCategory @default(LICITACIONES)
  procurement     ProcurementType @default(NATIONAL)
  deliveryType    DeliveryType?
  dueDate         DateTime?
  quoteDeadline   DateTime?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  requesterId  String
  requester    User         @relation("RequesterRequests", fields: [requesterId], references: [id])
  projectId    String?
  project      Project?     @relation(fields: [projectId], references: [id])
  departmentId String?
  department   Department?  @relation(fields: [departmentId], references: [id])
  clientId     String?
  client       Client?      @relation(fields: [clientId], references: [id])
  locationId   String?
  location     Location?    @relation("PRDestination", fields: [locationId], references: [id])
  warehouseId  String?
  warehouse    Location?    @relation("PRWarehouse", fields: [warehouseId], references: [id])

  items       PRItem[]
  quote       Quote?
  attachments Attachment[]
  auditLogs   AuditLog[]
  assignments Assignment[]

  @@index([departmentId])
  @@index([clientId])
  @@index([deliveryType])
  @@index([reference])
}

model PRItem {
  id               String   @id @default(cuid())
  description      String
  quantity         Decimal  @db.Decimal(18, 6)
  unit             String?
  requiredCurrency String?
  itemType         ItemType @default(PRODUCT)
  sku              String?
  barcode          String?
  extraSpecs       Json?

  purchaseRequestId String
  purchaseRequest   PurchaseRequest @relation(fields: [purchaseRequestId], references: [id])
  productId         String?
  product           Product?        @relation(fields: [productId], references: [id])

  quoteLines      QuoteLine[]
  quoteOfferLines QuoteOfferLine[]
  orderLines      POLine[]

  @@index([purchaseRequestId])
  @@index([sku])
  @@index([barcode])
}

// ============================================================================
// MÓDULO: COTIZACIONES
// ============================================================================

model Quote {
  id            String    @id @default(cuid())
  status        String    @default("REQUESTED")
  validUntil    DateTime?
  baseCurrency  String
  isInternational Boolean @default(false)
  incoterm      String?
  originCountry String?
  customsNotes  String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  purchaseRequestId String          @unique
  purchaseRequest   PurchaseRequest @relation(fields: [purchaseRequestId], references: [id])

  lines       QuoteLine[]
  offers      QuoteOffer[]
  attachments Attachment[]
}

model QuoteLine {
  id              String   @id @default(cuid())
  chosenSupplierId String?
  chosenOfferId   String?
  chosenUnitPrice Decimal? @db.Decimal(18, 6)
  chosenCurrency  String?

  quoteId  String
  quote    Quote  @relation(fields: [quoteId], references: [id])
  prItemId String
  prItem   PRItem @relation(fields: [prItemId], references: [id])

  @@index([quoteId])
}

model QuoteOffer {
  id            String   @id @default(cuid())
  currency      String
  rateHNL       Decimal? @db.Decimal(18, 6)
  leadTimeDays  Int?
  deliveryTerms String?
  paymentTerms  String?
  notes         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  quoteId    String
  quote      Quote    @relation(fields: [quoteId], references: [id])
  supplierId String
  supplier   Supplier @relation(fields: [supplierId], references: [id])

  lines       QuoteOfferLine[]
  attachments Attachment[]

  @@unique([quoteId, supplierId])
}

model QuoteOfferLine {
  id           String  @id @default(cuid())
  unitPrice    Decimal @db.Decimal(18, 6)
  deliveryDays Int?
  notes        String?

  quoteOfferId String
  quoteOffer   QuoteOffer @relation(fields: [quoteOfferId], references: [id])
  prItemId     String
  prItem       PRItem     @relation(fields: [prItemId], references: [id])

  @@index([quoteOfferId])
}

// ============================================================================
// MÓDULO: ÓRDENES DE COMPRA
// ============================================================================

model PurchaseOrder {
  id            String   @id @default(cuid())
  currency      String
  rateHNL       Decimal? @db.Decimal(18, 6)
  status        String   @default("SUBMITTED")
  sourceQuoteId String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  supplierId String
  supplier   Supplier  @relation(fields: [supplierId], references: [id])
  projectId  String?
  project    Project?  @relation(fields: [projectId], references: [id])
  locationId String?
  location   Location? @relation(fields: [locationId], references: [id])

  lines       POLine[]
  shipments   Shipment[]
  attachments Attachment[]
  auditLogs   AuditLog[]

  @@index([supplierId])
}

model POLine {
  id          String   @id @default(cuid())
  description String
  quantity    Decimal  @db.Decimal(18, 6)
  unit        String?
  unitPrice   Decimal  @db.Decimal(18, 6)
  taxPercent  Decimal? @db.Decimal(5, 2)
  discount    Decimal? @db.Decimal(18, 6)

  purchaseOrderId String
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  prItemId        String?
  prItem          PRItem?       @relation(fields: [prItemId], references: [id])
  productId       String?
  product         Product?      @relation(fields: [productId], references: [id])

  shipmentLines ShipmentLine[]

  @@index([purchaseOrderId])
}

// ============================================================================
// MÓDULO: ENVÍOS Y LOGÍSTICA
// ============================================================================

model Shipment {
  id           String   @id @default(cuid())
  carrier      String?
  trackingCode String?
  incoterm     String?
  mode         String?
  status       String   @default("PREPARED")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  purchaseOrderId String
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])

  events ShipmentEvent[]
  lines  ShipmentLine[]
}

model ShipmentLine {
  id       String  @id @default(cuid())
  quantity Decimal @db.Decimal(18, 6)

  shipmentId String
  shipment   Shipment @relation(fields: [shipmentId], references: [id])
  poLineId   String
  poLine     POLine   @relation(fields: [poLineId], references: [id])

  @@index([shipmentId])
}

model ShipmentEvent {
  id        String   @id @default(cuid())
  status    String
  notes     String?
  visibleTo String?
  at        DateTime @default(now())

  shipmentId String
  shipment   Shipment @relation(fields: [shipmentId], references: [id])

  @@index([shipmentId])
}

// ============================================================================
// MÓDULO: ASIGNACIONES Y SEGUIMIENTO
// ============================================================================

model Assignment {
  id               String       @id @default(uuid())
  assignmentId     String       @unique // ID público (ej: ASSIGN-001)
  entityType       String
  entityId         String
  role             String
  progress         Int          @default(0)
  eta              DateTime?
  followStatus     FollowStatus @default(IN_PROGRESS)
  priorityRequested Boolean     @default(false)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt

  assignedToId String
  assignedTo   User   @relation("AssigneeAssignments", fields: [assignedToId], references: [id])
  requesterId String @default("cmfzxhs2n001ohklgjuipl4nu")
  requester   User   @relation("AssignmentRequester", fields: [requesterId], references: [id])

  // Relación directa con PurchaseRequest (si entityType es siempre "PurchaseRequest")
  purchaseRequestId String?
  purchaseRequest   PurchaseRequest? @relation(fields: [purchaseRequestId], references: [id])

  messages ChatMessage[]

  @@index([entityType, entityId])
  @@index([assignedToId])
}

model ChatMessage {
  id        String   @id @default(uuid())
  body      String?
  createdAt DateTime @default(now())

  assignmentId String
  assignment   Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  senderId     String
  sender       User       @relation("ChatMessageSender", fields: [senderId], references: [id])

  files FileAttachment[]

  @@index([assignmentId])
}

model FileAttachment {
  id        String   @id @default(uuid())
  fileName  String
  mimeType  String
  sizeBytes Int
  url       String
  createdAt DateTime @default(now())

  chatMessageId String?
  message       ChatMessage? @relation(fields: [chatMessageId], references: [id], onDelete: SetNull)

  @@index([chatMessageId])
}

// ============================================================================
// MÓDULO: COMUNICACIÓN (THREADS)
// ============================================================================

model Thread {
  id         String   @id @default(cuid())
  entityType String
  entityId   String
  createdAt  DateTime @default(now())

  createdById String
  createdBy   User   @relation(fields: [createdById], references: [id])

  participants ThreadParticipant[]
  messages     Message[]

  @@index([entityType, entityId])
}

model ThreadParticipant {
  id   String  @id @default(cuid())
  role String?

  threadId String
  thread   Thread @relation(fields: [threadId], references: [id])
  userId   String
  user     User   @relation(fields: [userId], references: [id])

  @@unique([threadId, userId])
}

model Message {
  id        String   @id @default(cuid())
  body      String?
  createdAt DateTime @default(now())

  threadId String
  thread   Thread @relation(fields: [threadId], references: [id])
  authorId String
  author   User   @relation(fields: [authorId], references: [id])

  attachments Attachment[]

  @@index([threadId])
}

// ============================================================================
// MÓDULO: ADJUNTOS Y AUDITORÍA
// ============================================================================

model Attachment {
  id         String   @id @default(cuid())
  entityType String
  entityId   String
  fileName   String
  mimeType   String
  size       Int
  url        String
  createdAt  DateTime @default(now())

  createdById String?
  createdBy   User?   @relation("AttachmentCreatedBy", fields: [createdById], references: [id])

  purchaseRequestId String?
  purchaseRequest   PurchaseRequest? @relation(fields: [purchaseRequestId], references: [id])
  quoteId           String?
  quote             Quote?           @relation(fields: [quoteId], references: [id])
  quoteOfferId      String?
  quoteOffer        QuoteOffer?      @relation(fields: [quoteOfferId], references: [id])
  purchaseOrderId   String?
  purchaseOrder     PurchaseOrder?   @relation(fields: [purchaseOrderId], references: [id])
  messageId         String?
  message           Message?         @relation(fields: [messageId], references: [id])
}

model AuditLog {
  id         String   @id @default(cuid())
  entityType String
  entityId   String
  action     String
  before     Json?
  after      Json?
  at         DateTime @default(now())

  actorId String?
  actor   User?   @relation(fields: [actorId], references: [id])

  purchaseRequestId String?
  purchaseRequest   PurchaseRequest? @relation(fields: [purchaseRequestId], references: [id])
  purchaseOrderId   String?
  purchaseOrder     PurchaseOrder?   @relation(fields: [purchaseOrderId], references: [id])

  @@index([entityType, entityId])
}

// ============================================================================
// MÓDULO: NOTIFICACIONES
// ============================================================================

model Notification {
  id        String    @id @default(cuid())
  type      String
  title     String
  body      String?
  readAt    DateTime?
  createdAt DateTime  @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id])
}